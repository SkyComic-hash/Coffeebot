 import logging
import random
import time
import sqlite3
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
BOT_TOKEN = "8062907219:AAFxc2UD7J0Cw9f9oGOIOIQcqmrlmq12Aqg"

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
COFFEE_TYPES = [
    "—Å –±—É–ª–æ—á–∫–æ–π —Å –º–∞–∫–æ–º",
    "—Å –æ–≤—Å—è–Ω—ã–º –ø–µ—á–µ–Ω—å–µ–º",
    "—Å –ø—Ä—è–Ω–∏–∫–æ–º",
    "—Å —à–æ–∫–æ–ª–∞–¥–Ω—ã–º –∫–µ–∫—Å–æ–º",
    "—Å –≤–∞–Ω–∏–ª—å–Ω—ã–º –∫—Ä—É–∞—Å—Å–∞–Ω–æ–º",
    "—Å –º–∏–Ω–¥–∞–ª—å–Ω—ã–º –ø–µ—á–µ–Ω—å–µ–º"
]

SPILL_MESSAGES = [
    "–æ–π, –Ω–µ–ª–æ–≤–∫–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å",
    "–∫–∞–∫–∞—è –Ω–µ—É–¥–∞—á–∞",
    "—Ä—É–∫–∏-–∫—Ä—é–∫–∏",
    "—Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å",
    "–∫–æ—Ñ–µ —Ä–µ—à–∏–ª —Å–±–µ–∂–∞—Ç—å"
]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('maccoffee.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        total_coffee REAL DEFAULT 0,
        last_drink_time INTEGER DEFAULT 0
    )
    ''')

    conn.commit()
    conn.close()


def get_user_info(user_id):
    conn = sqlite3.connect('maccoffee.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    conn.close()
    return user


def update_user_info(user_id, username, first_name, last_name, coffee_amount):
    conn = sqlite3.connect('maccoffee.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    current_time = int(time.time())

    if user:
        new_total = user[4] + coffee_amount
        cursor.execute('''
        UPDATE users 
        SET username = ?, first_name = ?, last_name = ?, total_coffee = ?, last_drink_time = ?
        WHERE user_id = ?
        ''', (username, first_name, last_name, new_total, current_time, user_id))
    else:
        cursor.execute('''
        INSERT INTO users (user_id, username, first_name, last_name, total_coffee, last_drink_time)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, coffee_amount, current_time))

    conn.commit()
    conn.close()
    return new_total if user else coffee_amount


def can_drink_coffee(user_id):
    conn = sqlite3.connect('maccoffee.db')
    cursor = conn.cursor()

    cursor.execute('SELECT last_drink_time FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    conn.close()

    if not result or not result[0]:
        return True, 0

    last_drink_time = result[0]
    current_time = int(time.time())
    time_diff = current_time - last_drink_time

    if time_diff >= 3600:
        return True, 0
    else:
        wait_time = 3600 - time_diff
        return False, wait_time


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! ‚òï\n\n–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –º–∞–∫–∫–æ—Ñ–µ!\n\n"
    welcome_text += "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /maccoffee –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–í–∏–ø–∏—Ç–∏ –º–∞–∫–∫–æ—Ñ–µ' —á—Ç–æ–±—ã –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ!\n"
    welcome_text += "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."

    keyboard = [['–í–∏–ø–∏—Ç–∏ –º–∞–∫–∫–æ—Ñ–µ', '/stats']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def maccoffee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = f"@{user.username}" if user.username else user.first_name

    can_drink, wait_time = can_drink_coffee(user_id)

    if not can_drink:
        minutes = wait_time // 60
        seconds = wait_time % 60

        response_text = f"{username}, —Ç—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª(–∞) –º–∞–∫–∫–æ—Ñ–µ, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"

        user_info = get_user_info(user_id)
        if user_info:
            total_coffee = user_info[4]
            response_text += f"\n\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ: {total_coffee:.1f} –ª. üçµ"

        await update.message.reply_text(response_text)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ (1, 2 –∏–ª–∏ 3)
    coffee_liters = random.randint(1, 3)
    coffee_amount = float(coffee_liters)

    # 15% —à–∞–Ω—Å –ø—Ä–æ–ª–∏—Ç—å –∫–æ—Ñ–µ
    if random.random() < 0.15:
        coffee_amount = -coffee_amount
        spill_message = random.choice(SPILL_MESSAGES)
        message = f"‚ùå {username}, {spill_message} –∏ –ø—Ä–æ–ª–∏–ª(–∞) {abs(coffee_amount):.0f} –ª–∏—Ç—Ä –º–∞–∫–∫–æ—Ñ–µ! üò¢"
    else:
        coffee_type = random.choice(COFFEE_TYPES)
        message = f"‚úÖ {username}, –≤—ã–ø–∏–ª(–∞) {coffee_liters} –ª–∏—Ç—Ä –º–∞–∫–∫–æ—Ñ–µ {coffee_type}! ‚òï"

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_total = update_user_info(user_id, user.username, user.first_name, user.last_name, coffee_amount)

    message += f"\n\n–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ: {new_total:.1f} –ª. ‚òï"

    await update.message.reply_text(message)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = f"@{user.username}" if user.username else user.first_name

    user_info = get_user_info(user_id)

    if user_info:
        total_coffee = user_info[4]
        response_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}:\n"
        response_text += f"–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ: {total_coffee:.1f} –ª. –º–∞–∫–∫–æ—Ñ–µ ‚òï\n\n"

        conn = sqlite3.connect('maccoffee.db')
        cursor = conn.cursor()
        cursor.execute('SELECT username, first_name, total_coffee FROM users ORDER BY total_coffee DESC LIMIT 5')
        top_users = cursor.fetchall()
        conn.close()

        response_text += "üèÜ –¢–æ–ø-5 –∫–æ—Ñ–µ–º–∞–Ω–æ–≤:\n"
        for i, (db_username, first_name, total) in enumerate(top_users, 1):
            display_name = f"@{db_username}" if db_username else first_name
            response_text += f"{i}. {display_name}: {total:.1f} –ª.\n"

    else:
        response_text = f"{username}, —Ç—ã –µ—â–µ –Ω–µ –ø–∏–ª(–∞) –º–∞–∫–∫–æ—Ñ–µ! –ò—Å–ø–æ–ª—å–∑—É–π /maccoffee —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"

    await update.message.reply_text(response_text)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    
    # –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    exact_commands = ['–≤–∏–ø–∏—Ç–∏ –º–∞–∫–∫–æ—Ñ–µ', '–≤—ã–ø–∏—Ç—å –º–∞–∫–∫–æ—Ñ–µ', '–º–∞–∫–∫–æ—Ñ–µ']
    
    if text in exact_commands:
        await maccoffee(update, context)
    # else: –ù–ò–ß–ï–ì–û –ù–ï –î–ï–õ–ê–ï–ú - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è


def main():
    init_db()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –¢–û–õ–¨–ö–û –ö–û–ú–ê–ù–î–´
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("maccoffee", maccoffee))
    application.add_handler(CommandHandler("stats", stats))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(
        filters.Regex(r'^(–≤–∏–ø–∏—Ç–∏ –º–∞–∫–∫–æ—Ñ–µ|–≤—ã–ø–∏—Ç—å –º–∞–∫–∫–æ—Ñ–µ|–º–∞–∫–∫–æ—Ñ–µ)$'),
        handle_message
    ))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()

